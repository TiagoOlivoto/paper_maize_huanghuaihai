timevar = "Spectrum",
v.names = "value",
direction = "long")
}
a$Spectrum <- factor(a$Spectrum, levels = names(x))
num_plots <- nlevels(a$Spectrum)
if (is.null(nrow) && is.null(ncol)){
ncol <- ceiling(sqrt(num_plots))
nrow <- ceiling(num_plots/ncol)
}
if (is.null(ncol)){
ncol <- ceiling(num_plots/nrow)
}
if (is.null(nrow)){
nrow <- ceiling(num_plots/ncol)
}
p <-
densityplot(~value | factor(Spectrum),
data = a,
groups = Spectrum,
scales=list(relation="free"),
xlab = "Pixel value",
layout = c(ncol, nrow),
plot.points = FALSE)
return(p)
} else{
get_pixels <- function(x, spectrum){
pixels <- data.frame(x@.Data)
colnames(pixels) <- 1:ncol(pixels)
pixels$id <- 1:nrow(pixels)
pixels <-
reshape(pixels,
direction = "long",
varying = list(names(pixels)[1:ncol(pixels)-1]),
v.names = "value",
idvar = "id",
timevar = "y",
times = names(pixels)[1:ncol(pixels)-1])
pixels$y <- as.numeric(pixels$y)
pixels$spectrum <- spectrum
return(pixels)
}
pixels <-
do.call(rbind,
lapply(seq_along(x), function(i){
ntpix <- prod(dim(x[[i]]))
if(ntpix > npixel){
rows <- dim(x[[i]])[1]
corfac <- sqrt(npixel / ntpix)
nrow_new <- ceiling(rows * corfac)
x2 <- EBImage::resize(x[[i]], nrow_new)
}
get_pixels(x2, names(x[i]))
})
)
num_plots <-length(unique(pixels$spectrum))
if (is.null(nrow) && is.null(ncol)){
ncol <- ceiling(sqrt(num_plots))
nrow <- ceiling(num_plots/ncol)
}
if (is.null(ncol)){
ncol <- ceiling(num_plots/nrow)
}
if (is.null(nrow)){
nrow <- ceiling(num_plots/ncol)
}
p <-
levelplot(value ~ id * y | spectrum,
layout = c(ncol, nrow),
data = pixels,
xlab = NULL,
ylab = NULL,
useRaster = TRUE,
col.regions = terrain.colors(300),
colorkey = list(interpolate = TRUE,
raster = TRUE))
return(p)
}
}
plot.image_index(ind)
plot.image_index(ind)
plot.image_index(ind, type = "density")
plot.image_index(ind)
ind <- image_index(img |> image_resize(30))
plot.image_index(ind)
rm(plot.image_index)
plot(ind)
library(pliman)
set_wd_here()
img <-
image_import("img.jpeg") |>
image_trim(left = 10, plot = TRUE)
ind <- image_index(img)
plot(ind)
plot(ind, npixel = 300000)
ind <- image_index(img |> image_resize(300))
plot(ind)
ind <- image_index(img, index = "R")
plot(ind)
plot(ind, npixel = 500000)
plot(ind)
image_segment(img)
img <-
image_import("img.jpeg") |>
image_trim(left = 10, plot = TRUE) |>
image_horizontal()
img <-
image_import("img.jpeg") |>
image_trim(left = 10) |>
image_horizontal(plot = TRUE)
x11()
dpi(img)
# dpi = 74
crop <- image_crop()
# dpi = 74
crop <- image_crop(img)
# dpi = 74
crop <- image_crop(img, plot = TRUE)
shps <- image_shp(crop, cols = 5, rows = 2)
anal <- analyze_objects_shp(img, shapefile = shps,
index = "R")
anal <- analyze_objects_shp(crop,
shapefile = shps,
index = "R")
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
index = "R")
View(anal)
View(anal[["results"]])
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
marker = "id",
index = "R")
res <- get_measures(anal, dpi = 74)
View(res)
View(res[["summary"]])
View(res[["results"]])
res <- get_measures(anal)
View(res)
View(res[["results"]])
res <- get_measures(anal, dpi = 74)
View(res)
View(res[["results"]])
View(anal)
View(res)
View(res[["results"]])
anal <- analyze_objects(crop,
# shapefile = shps,
watershed = FALSE,
marker = "id",
index = "R")
res <- get_measures(anal, dpi = 74)
View(res)
object <- anal
index <- object$object_index
shapefiles <- object$shapefiles$shapefiles
coords <-
do.call(rbind,
lapply(shapefiles, function(x){
data.frame(x = mean(x$x[-1]), y = mean(x$y[-1]))
}))
if(!is.null(index)){
index$img <- as.numeric(gsub(pattern = "shp", x = index$img, replacement = ""))
aggr <-
do.call(cbind,
lapply(3:ncol(index), function(i){
aggregate(index[[i]] ~ img, index, mean, na.rm = TRUE)[2]
})
)
names(aggr) <- c(names(index[3:ncol(index)]))
aggr$img <- paste0("obj", unique(index$img))
aggr <- aggr[,c(ncol(aggr), 1:(ncol(aggr)-1))]
aggr$x <- coords$x
aggr$y <- coords$y
aggr <- aggr[, c(c("img", "x", "y"), setdiff(colnames(aggr), c("img", "x", "y")))]
} else{
aggr <- NULL
}
res_img <- res$img
res$img <- as.numeric(gsub(pattern = "shp", x = res$img, replacement = ""))
smr <-
do.call(cbind,
lapply(5:ncol(res), function(i){
if(i  %in% c(5, 6, 28)){
if(i == 5){
n <- aggregate(res[[i]] ~ img, res, length)[[2]]
a <- aggregate(res[[i]] ~ img, res, sum, na.rm = TRUE)[2]
cbind(n, a)
} else{
aggregate(res[[i]] ~ img, res, sum, na.rm = TRUE)[2]
}
} else{
aggregate(res[[i]] ~ img, res, mean, na.rm = TRUE)[2]
}
})
)
res <- object$results
smr <-
do.call(cbind,
lapply(5:ncol(res), function(i){
if(i  %in% c(5, 6, 28)){
if(i == 5){
n <- aggregate(res[[i]] ~ img, res, length)[[2]]
a <- aggregate(res[[i]] ~ img, res, sum, na.rm = TRUE)[2]
cbind(n, a)
} else{
aggregate(res[[i]] ~ img, res, sum, na.rm = TRUE)[2]
}
} else{
aggregate(res[[i]] ~ img, res, mean, na.rm = TRUE)[2]
}
})
)
View(res)
View(res)
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
marker = "id",
index = "R")
res <- anal$results
View(res)
library(pliman)
set_wd_here()
img <-
image_import("img.jpeg") |>
image_trim(left = 10) |>
image_horizontal(plot = TRUE)
x11()
# dpi = 74
crop <- image_crop(img, plot = TRUE)
shps <- image_shp(crop, cols = 5, rows = 2)
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
marker = "id",
index = "R")
res <- get_measures(anal, dpi = 74)
View(res)
View(res[["results"]])
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
marker = "id",
index = "G")
anal <- analyze_objects_shp(crop,
shapefile = shps,
watershed = FALSE,
marker = "id",
index = "NG")
image_segment(img, index = "all")
image_segment(crop, index = "all")
img <- image_pliman("soybean_touch.jpg")
image_index(img, index = c("R, NR"))
library(pliman)
img <- image_pliman("sev_leaf.jpg")
# resize the image to 30% of the original size
ind <- image_index(img, resize = 30, show_image = FALSE)
plot(ind)
library(pliman)
img <- image_pliman("soybean_touch.jpg")
image_index(img, index = c("R, NR"))
img <- image_pliman("sev_leaf.jpg")
# resize the image to 30% of the original size
ind <- image_index(img, resize = 30, show_image = FALSE)
plot(ind)
# resize the image to 30% of the original size
ind <- image_index(img, resize = 100, show_image = FALSE)
plot(ind)
plot(ind$R)
# resize the image to 30% of the original size
ind <- image_index(img |> image_filter(), resize = 100, show_image = FALSE)
plot(ind)
# resize the image to 30% of the original size
ind <- image_index(img |> image_filter(size = 3), resize = 100, show_image = FALSE)
plot(ind)
# resize the image to 30% of the original size
ind <- image_index(img |> image_filter(size = 5), resize = 100, show_image = FALSE)
plot(ind)
library(pliman)
setwd("E:/Desktop/UFSC/projetos/pesquisa/fenomica/leaf_grid")
set_wd_here()
list.files()
# importar imagem
img <- image_import("img1.jpeg", plot = TRUE)
R <- img@.Data[[1]]
R <- img@.Data[,,1]
View(R)
3024*4032
img2 <- image_resize(img, rel_size = 50)
image_combine(img, img2)
img2 <- image_resize(img, rel_size = 10)
image_combine(img, img2)
img2 <- image_resize(img, rel_size = 5)
image_combine(img, img2)
img2 <- image_resize(img, rel_size = 10)
image_combine(img, img2)
img2 <- image_resize(img, rel_size = 100)
image_combine(img, img2)
img3 <- image_filter(img, size = 6)
image_combine(img, img2, img3)
image_combine(img, img2, img3, col = 3)
image_combine(img, img2, img3, ncol = 3)
img3 <- image_filter(img)
image_combine(img, img2, img3, ncol = 3)
# resolução
plot(img)
# resolução
dpi(img)
# resolução
x11()
dpi(img)
img <- image_import("img1.jpeg", plot = TRUE) |> image_horizontal()
dpi(img)
dpi(img)
x11()
dpi(img)
# dpi = 74.20725
x11()
crop <- image_crop(img)
crop <- image_crop(img, plot = TRUE)
rm(img2, img3)
plot(crop)
plot(crop)
plot(crop)
# dpi = 74.20725
x11()
plot(crop)
library(pliman)
set_wd_here()
# importar imagem
img <- image_import("img1.jpeg", plot = TRUE) |> image_horizontal()
crop <- image_crop(img, plot = TRUE)
# dpi = 74.20725
x11()
crop <- image_crop(img, plot = TRUE)
plot(crop)
plot(crop |> image_vertical())
plot(crop)
flip <- image_hreflect(crop, plot = TRUE)
# shapefile
shp <- image_shp(flip)
# shapefile
shp <- image_shp(flip, cols = 10)
# shapefile
shp <- image_shp(flip, cols = 5)
# shapefile
shp <- image_shp(flip, cols = 5, rows = 2)
View(shp)
View(shp[["shapefiles"]][["plot_1"]])
#
plot(flip)
# índice
image_segment(flip)
# índice
image_segment(flip, index = "R")
# índice
image_segment(flip, index = "B")
# índice
image_index(flip, index = "B") |> plot()
# índice
image_index(flip, index = "B") |> plot(type = "density")
# índice
image_index(flip, index = "B") |> plot(type = "density")
image_index(flip, index = "B")
# índice
indice <- image_index(flip, index = "B")
plot(indice)
plot(indice, type = "density")
#segmentar
image_segment(flip, index = "B")
#segmentar
image_segment(flip, index = "B", threshold = 0.2)
#segmentar
image_segment(flip, index = "B", threshold = 0.1)
#segmentar
image_segment(flip, index = "B", threshold = 0.05)
#segmentar
image_segment(flip, index = "B", threshold = 0.6)
#segmentar
image_segment(flip, index = "B")
#segmentar
image_segment(flip, index = "B", invert = TRUE)
# binária
image_binary(flip, index = "B")
# binária
image_binary(flip, index = "B", fill_hull = TRUE)
# binária
image_binary(flip, index = "B", fill_hull = TRUE, filter = 3)
# binária
image_binary(flip, index = "B", fill_hull = TRUE, filter = 10)
View(indice)
indice[["B"]]
View(indice)
mat <- indice$B
mat <- indice$B[,,1]
mat <- indice$B[,,]
mat <- indice$B |> as.matrix()
mat <- img@.Data[,,1]
View(mat)
#segmentar
image_segment(flip, index = "B")
# analisar
res <- analyze_objects(flip, index = "B")
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE)
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE,
marker = "id")
View(res)
View(res[["results"]])
corrigido <- get_measures(res, dpi = 74.20725)
View(corrigido)
# analizar shapes
perim <- object_coord(flip, index = "B", watershed = FALSE)
# analizar shapes
perim <- object_contour(flip, index = "B", watershed = FALSE)
# analizar shapes
perim <- object_contour(flip, index = "B", watershed = FALSE)
poly_perimeter(perim$`26`)
plot_polygon(perim$26)
plot_polygon(perim$`26`)
plot_polygon(perim$`26`, aspect_ratio = 1)
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE,
marker = "id")
plot_polygon(perim$`26` |> poly_align(), aspect_ratio = 1)
# shapefile
shp <- image_shp(flip, cols = 5, rows = 2)
?analyze_objects_shp
res <- analyze_objects_shp(flip,
shapefile = shp,
index = "B",
watershed = FALSE,
marker = "id")
View(res)
View(res[["results"]])
View(res[["statistics"]])
View(res[["results"]])
corrigido <- get_measures(res, dpi = 74.20725)
View(corrigido)
View(corrigido[["results"]])
View(corrigido)
View(corrigido[["results"]])
# área foliar por planta
library(tidyverse)
resultados <-
corrigido$results |>
group_by(img) |>
summarise(aftot = sum(area),
comp_medio = mean(length),
larg_medio = mean(width))
View(resultados)
res <-
analyze_objects_shp(flip,
shapefile = shp,
index = "B",
watershed = FALSE,
marker = "id",
object_size = "DGCI")
res <-
analyze_objects_shp(flip,
shapefile = shp,
index = "B",
watershed = FALSE,
marker = "id",
object_index = "DGCI")
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE,
marker = "id",
object_index = "DGCI")
plot_measures(res, measure = "DGCI", hjust = -20)
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE,
marker = "id",
object_index = "DGCI")
plot_measures(res, measure = "DGCI", hjust = -100)
# analisar
res <- analyze_objects(flip,
index = "B",
watershed = FALSE,
# marker = "id",
object_index = "DGCI")
plot_measures(res, measure = "DGCI", hjust = -100)
res <-
analyze_objects_shp(flip,
shapefile = shp,
index = "B",
watershed = FALSE,
marker = "id",
object_index = "DGCI")
View(res)
View(res[["object_index"]])
corrigido <- get_measures(res, dpi = 74.20725)
View(corrigido)
View(corrigido[["index"]])
dgci <- corrigido$index
View(dgci)
library(pliman)
open_wd_here()
